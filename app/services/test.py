import os

def create_file(path, content=""):
    os.makedirs(os.path.dirname(path), exist_ok=True)
    with open(path, "w") as f:
        f.write(content)

def generate_fastapi_boilerplate(base_dir):
    structure = {
        "app/main.py": """\
from fastapi import FastAPI
from app.routers import sample

app = FastAPI()

app.include_router(sample.router)
""",

        "app/routers/sample.py": """\
from fastapi import APIRouter

router = APIRouter()

@router.get("/")
def read_root():
    return {"message": "Welcome to FastAPI!"}
""",

        "app/models/__init__.py": "",
        "app/schemas/__init__.py": "",
        "app/dependencies/__init__.py": "",
        "app/config/__init__.py": "",

        "tests/test_sample.py": """\
from fastapi.testclient import TestClient
from app.main import app

client = TestClient(app)

def test_read_root():
    response = client.get("/")
    assert response.status_code == 200
    assert response.json() == {"message": "Welcome to FastAPI!"}
""",

        "requirements.txt": """\
fastapi
uvicorn
pydantic
httpx
pytest
""",

        ".gitignore": """\
__pycache__/
*.pyc
.env
""",

        "README.md": f"# FastAPI Project\n\nThis is a basic FastAPI boilerplate generated by script.\n",
    }

    for relative_path, content in structure.items():
        file_path = os.path.join(base_dir, relative_path)
        create_file(file_path, content)

    print(f"âœ… FastAPI boilerplate created at: {base_dir}")

# Example usage
if __name__ == "__main__":
    import sys
    if len(sys.argv) != 2:
        print("Usage: python generate_fastapi_boilerplate.py <target_directory>")
    else:
        generate_fastapi_boilerplate(sys.argv[1])
